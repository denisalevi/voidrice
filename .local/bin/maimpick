#!/bin/sh
rootdir=~/pictures/screenshots
selection="$(printf "\
a selected area
current window
full screen
digital paper
digital paper (pdf)
a selected area (copy)
current window (copy)
full screen (copy)
digital paper (copy)
digital paper (select area)" \
    | dmenu -l 6 -i -p "Screenshot which area?")"

function dptrp1_screenshot () {
    dptrp1 --addr digitalpaper.local screenshot $1
}

case $selection in
	"a selected area")
        filepath="$rootdir/pic-selected-$(date '+%y%m%d-%H%M-%S').png"
        maim -s "$filepath"
        ;;
	"current window")
        filepath="$rootdir/pic-window-$(date '+%y%m%d-%H%M-%S').png"
        maim -i "$(xdotool getactivewindow)" "$filepath"
        ;;
	"full screen")
        filepath="$rootdir/pic-full-$(date '+%y%m%d-%H%M-%S').png"
        maim "$filepath"
        ;;
    "digital paper")
        filepath="$rootdir/dptrp1-$(date '+%y%m%d-%H%M-%S').png"
        dptrp1_screenshot "$filepath"
        ;;
    "digital paper (pdf)")
        filepath="$rootdir/dptrp1.pdf"
        dptrp1_screenshot "$rootdir/dptrp1.png" && convert "$rootdir/dptrp1.png" $filepath
        ;;
	"a selected area (copy)")
        maim -s | xclip -selection clipboard -t image/png
        ;;
	"current window (copy)")
        maim -i "$(xdotool getactivewindow)" | xclip -selection clipboard -t image/png
        ;;
	"full screen (copy)")
        maim | xclip -selection clipboard -t image/png
        ;;
    "digital paper (copy)")
        dptrp1_screenshot /tmp/dptrp1-screenshot.png
        if [ $? = 0 ]
        then
            nsxiv -f /tmp/dptrp1-screenshot.png &
            PROC_ID="$!"
            maim -s | xclip -selection clipboard -t image/png
            kill $PROC_ID
        fi
        dptrp1_screenshot /tmp/dptrp1-screenshot.png \
            && xclip -selection clipboard -t image/png -i /tmp/dptrp1-screenshot.png
        ;;
    "digital paper (select area)")
        filepath="$rootdir/dptrp1-selected-$(date '+%y%m%d-%H%M-%S').png"
        maim -s "$filepath"
        dptrp1_screenshot /tmp/dptrp1-screenshot.png
        if [ $? = 0 ]
        then
            nsxiv -f /tmp/dptrp1-screenshot.png &
            PROC_ID="$!"
            maim -s "$filepath"
            kill $PROC_ID
        fi
        ;;
esac

retvar=$?
if [ $retvar != 0 ]
then
    DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
    msg="ERROR: $0 screenshot command failed with return code $retvar."
    notify-send "$msg"
    exit 1
fi


if [ -n "$filepath" ]; then
    filename=$(basename -- "$filepath")
    extension="${filename##*.}"

    # XXX: check ~/.config/nsxiv/exec/key-handler for how to pass directories from bmdirs
    rm_leading_spaces='s/^[[:space:]]*//'
    vimwiki_img_dir="~/documents/notes/vimwiki/images"
    # ~/documents/notes/vim-notes/.images
    new_rootdir="$(printf "\
        ~/pictures/screenshots
        $vimwiki_img_dir" \
            | sed -e $rm_leading_spaces \
            | dmenu -l 3 -p "Screenshot where to save?" \
            | sed "s|~|$HOME|g")"


    # suggest already existing files as filenames (reverse alphabetic order, -r)
    rm_ext='s/\.[^.]*$//'
    note_names=$(ls -t $new_rootdir | sed $rm_ext)

    ## if vimwiki/images, just suggest names of note files in vimwiki/
    #if [ "$new_rootdir" = "$vimwiki_img_dir" ]; then
    #    note_names=$(ls -r ~/documents/notes/vimwiki/*.md | sed $rm_ext)
    #fi

    function get_filename() {
        new_filename="$(printf "\
            timestemp
            $note_names" \
                | sed $rm_leading_spaces \
                | dmenu -l 6 -p "Screenshot file name?")"
    }

    get_filename

    if [ "$new_filename" = "timestemp" ]
    then
        # means the default $filepath is used
        unset new_filename
    else
        tmp_filepath="$new_rootdir/$new_filename"
        while [ -f "$tmp_filepath" ] || [ -f "$tmp_filepath.$extension" ]
        do
            # red overwrite question, copied from ~/.scripts/i3cmds/prompt
            msg="$new_filename exists, OVERWRITE?"
            overwrite=$(printf "No (change filename)\\nYes\\nAbort" \
                | dmenu -i -p "$msg" -nb darkred -sb red -sf white -nf gray)
            if [ "$overwrite" = "Yes" ]
            then
                break
            elif [ "$overwrite" = "Abort" ]
            then
                # leave screenshot in screenshot directory
                unset new_filename
                break
            elif [ "$overwrite" = "No (change filename)" ]
            then
                get_filename
            else
                notify-send "ERROR in maimpick overwrite prompt"
                break
            fi
            tmp_filepath="$new_rootdir/$new_filename"
        done
    fi

    if [ -n "$new_filename" ]
    then
        new_extension="${new_filename##*.}"

        ## append index to filename if it already exists
        #original_filepath=$new_rootdir/$new_filename
        #tmp_filepath="$original_filepath"
        #idx=0
        #while [ -f "$tmp_filepath" ] || [ -f "$tmp_filepath".$extension ]; do
        #    idx=$((idx + 1))
        #    tmp_filepath="${original_filepath##.$extension}-$idx"
        #done

        if [ "$new_extension" = "$extension" ]
        then
            # extension was given in new filename, don't append it again
            full_filename=$new_filename
        else
            full_filename=$new_filename.$extension
        fi

        new_filepath=$new_rootdir/$full_filename
        mv "$filepath" "$new_filepath" && notify-send -i "$(readlink -f "$filepath")" "Screenshot saved as $new_filepath"
    else
        notify-send -i "$(readlink -f "$filepath")" "Screenshot saved as $filepath"
    fi

    # copy relative path from vim-notes or vimwiki to clipboard
    case $new_rootdir in
        "$HOME/documents/notes/vim-notes/.images")
            relpath="./.images/$full_filename"
            printf "$relpath" \
                | xclip -selection clipboard \
                && notify-send "Copied $relpath to clipboard"
            ;;
        "$HOME/documents/notes/vimwiki/images")
            relpath="images/$full_filename"
            printf "$relpath" \
                | xclip -selection clipboard \
                && notify-send "Copied $relpath to clipboard"
            ;;
    esac
fi
